--- src/SomeAntics/SomeAntics/SomeAntics.cs
+++ src/Antics.SomeLoader/SomeAntics/SomeAntics.cs
@@ -1,16 +_,18 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
+using SomeAntics.API;
 using SomeAntics.Map;
 using SomeAntics.Objects.Interactables;
 using SomeAntics.Particles;
 using System;
+using Webmilio.Commons.Extensions;
 using Webmilio.Commons.Extensions.Reflection;
 using WordLibrary;
 
 namespace SomeAntics
 {
-	public class SomeAntics : Game
+	public partial class SomeAntics : Game
 	{
 		public const int UPS = 60;
 		public const int ResWidth = 1280;
@@ -18,6 +_,7 @@
 		public static SpriteBatch spriteBatch;
 		public static SpriteFont wordFont;
 		public readonly Random rand = new Random();
+		public GraphicsDeviceManager DeviceManager => _graphics;
 		private readonly GraphicsDeviceManager _graphics;
 		private bool _contentLoaded;
 
@@ -78,14 +_,17 @@
 		}
 
 		protected override void Initialize() {
+			PreInitialize?.Invoke(this);
 			World = new World();
 			MouseState mouseState2 = PreviousMouseState = (MouseState = Mouse.GetState());
 			KeyboardState keyboardState2 = PreviousKeyboardState = (KeyboardState = Keyboard.GetState());
 			CurrentLevel = 0;
 			base.Initialize();
+			PostInitialize?.Invoke(this);
 		}
 
 		protected override void LoadContent() {
+			PreLoadContent?.Invoke(this);
 			base.Window.AllowUserResizing = false;
 			_graphics.PreferredBackBufferWidth = 1280;
 			_graphics.PreferredBackBufferHeight = 720;
@@ -95,9 +_,11 @@
 			wordFont = base.Content.Load<SpriteFont>("Fonts/font");
 			spriteBatch = new SpriteBatch(base.GraphicsDevice);
 			_contentLoaded = true;
+			PostLoadContent?.Invoke(this);
 		}
 
 		protected override void Update(GameTime gameTime) {
+			PreUpdateGlobal?.Invoke(this);
 			MouseState = Mouse.GetState();
 			KeyboardState = Keyboard.GetState();
 			if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || JustPressed(Keys.Escape))
@@ -109,6 +_,7 @@
 			PreviousMouseState = MouseState;
 			PreviousKeyboardState = KeyboardState;
 			base.Update(gameTime);
+			PostUpdateGlobal?.Invoke(this);
 		}
 
 		private void CheckControls() {
@@ -150,38 +_,44 @@
 
 		protected override void Draw(GameTime gameTime) {
 			if (_contentLoaded) {
+				PreDrawGlobal?.Invoke(this);
 				base.GraphicsDevice.Clear(Color.DarkGray);
 				spriteBatch.Begin();
 				World.Draw(spriteBatch);
 				ParticleManager.Draw(spriteBatch);
 				World.DrawWords(spriteBatch);
+				PostDrawGlobal?.Invoke(this);
 				spriteBatch.End();
 				base.Draw(gameTime);
 			}
 		}
 
-		public bool JustPressed(Keys key) {
+		private bool do_JustPressed(ref Keys key) {
+			foreach (Mod mod in ModManager.Mods)
+				mod.ModifyIncomingKeyPress(ref key);
 			if (KeyboardState[key] == KeyState.Down)
 				return PreviousKeyboardState[key] == KeyState.Up;
 
 			return false;
 		}
 
-		public bool JustReleased(Keys key) {
+		public bool do_JustReleased(ref Keys key) {
+			foreach (Mod mod in ModManager.Mods)
+				mod.ModifyIncomingKeyRelease(ref key);
 			if (KeyboardState[key] == KeyState.Up)
 				return PreviousKeyboardState[key] == KeyState.Down;
 
 			return false;
 		}
 
-		public bool JustLeftClicked() {
+		public bool do_JustLeftClicked() {
 			if (MouseState.LeftButton == ButtonState.Pressed)
 				return PreviousMouseState.LeftButton == ButtonState.Released;
 
 			return false;
 		}
 
-		public bool JustRightClicked() {
+		public bool do_JustRightClicked() {
 			if (MouseState.RightButton == ButtonState.Pressed)
 				return PreviousMouseState.RightButton == ButtonState.Released;
 
